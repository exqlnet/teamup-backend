package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _config_dev_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\xd1\x0a\x83\x30\x0c\x45\xdf\xfd\x8a\x90\xe7\x21\x71\x6e\x0e\xfc\x9b\x68\x03\x8e\xa1\x29\x4d\xeb\x06\xc3\x7d\xfb\xa8\xba\xf9\x56\xce\xb9\xf7\x36\xef\x02\x00\x39\xc5\x01\x5b\xc8\x6f\x00\x94\x97\xbf\x07\xc1\x16\x1a\x22\xa2\xd3\x06\x4d\xfa\x20\x11\x5b\xc0\xa9\x4f\x83\x8e\xa2\x8f\x0f\x16\x00\x4b\xf6\xe8\xba\xa3\x3e\xa8\xad\xb9\xea\x7c\x2b\xa9\xa4\xb2\xc2\x7d\xc2\x6b\xc8\xa2\xae\xa9\xd9\x49\x32\x09\x13\x8f\xf9\x2f\x0c\xaa\xf1\x9f\x64\xb3\xa7\x06\xb7\xcd\xd4\x97\x6b\xf3\x33\x8e\x23\x77\x6c\x6b\x23\x0a\x8f\xc9\x1f\x47\xc8\x34\x67\xec\x64\xc6\x62\xf9\x06\x00\x00\xff\xff\x24\x1b\xb0\xb6\xd8\x00\x00\x00")

func config_dev_json() ([]byte, error) {
	return bindata_read(
		_config_dev_json,
		"config-dev.json",
	)
}

var _config_test_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x51\xaa\x83\x40\x0c\x45\xff\x5d\x45\xc8\xf7\x43\xe2\xb3\xb5\xe0\x6e\xa2\x06\x2c\x45\x23\x93\x4c\x5b\x28\x76\xed\x65\x1c\x5b\xff\x86\x73\xee\xbd\x93\x57\x01\x80\x1c\x7d\xc4\x16\xd2\x1b\x00\xe5\xb9\x5c\x83\x60\x0b\x0d\x11\xd1\x5f\x86\x26\x7d\x10\xc7\x16\x70\xee\xe3\xa8\x93\xe8\xed\x8d\x05\xc0\x9a\x3c\x0e\xdd\x51\x1f\xd5\xb6\x5c\xf5\x7f\x29\xa9\xa4\xb2\xc2\x7d\x62\xd1\x90\x44\x5d\x53\xb3\x93\x68\x12\x66\x9e\xd2\x5f\x18\x54\xfd\x97\x64\xb3\x87\x86\x21\xcf\xd4\xa7\x73\xf3\x35\x03\x3b\x77\x6c\x5b\xc3\x85\xa7\xb8\x1c\x47\xc8\x7c\xcf\xd8\x1c\x8b\xf5\x13\x00\x00\xff\xff\x6f\x0d\x7b\xd7\xd9\x00\x00\x00")

func config_test_json() ([]byte, error) {
	return bindata_read(
		_config_test_json,
		"config-test.json",
	)
}

var _config_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xc1\x8b\xd4\x30\x14\xc6\xcf\x79\x7f\xc5\x33\xa7\x14\x76\x5a\xf0\x28\xcc\x41\x66\x75\x41\x74\x46\x76\x11\x0f\x22\x43\x36\x7d\xcd\x44\xdb\xbc\x21\x49\xbb\x2c\x32\xff\xbb\x24\xa9\x1e\xbc\x8c\x82\x87\xd2\x36\x7c\xfd\xfd\x3e\xf8\x7a\xd6\xe6\xbb\xb6\x84\x86\xfd\xe0\x2c\x80\x9b\xce\x1c\x12\x2a\x10\xd2\xba\x74\x9a\x1f\x5b\xc3\x53\x37\x39\x13\xb8\xb3\xbc\xa9\x0f\xcb\xcb\xae\xe6\xe5\xdf\xc5\xba\xc8\x73\x30\xf4\x6f\xe9\x6e\xa2\x89\xc3\x73\xfe\x68\xe4\x62\xe2\x28\xa1\x01\x58\x74\xc0\xdd\x60\xd7\xca\xed\x6e\x6d\x3e\xcc\xde\xa0\xf3\x2e\xa9\x06\x7f\x80\xd8\x0d\xf6\x06\x8f\x88\xdb\x5f\xb9\x3d\x3d\xd5\xa8\x6a\x40\x64\x06\x85\x72\x71\x80\xfa\x1e\x0d\x56\x73\xfb\x50\x6e\xf5\xd4\x0c\xf6\x56\x27\x8d\x5f\xbe\x3e\x3e\x27\x02\x10\xf1\xc9\x25\x73\x42\x8e\xed\x1d\x25\xf2\x8b\x92\x77\x87\xe3\xfd\xa7\xfd\xf1\xc3\xe1\xf6\x8d\x2c\x6e\xa3\x23\xa1\x3c\x07\xee\x67\x93\xe4\x2b\x10\x62\xa5\xdc\x14\xe9\x16\x5f\xc7\x48\x49\xc9\xb5\xd9\xb7\xc8\x5e\x36\x20\xc4\xc8\xb6\xfd\x18\x9c\x4f\xa3\x57\xf2\x7e\xf6\xde\x79\x8b\x3a\xe1\x4a\xc2\x89\x7b\xca\xc1\xca\xef\x69\xb9\xca\xde\xf4\xb4\x5c\xe7\xf7\xb4\xfc\xc1\x4e\x14\xaf\x17\xdf\xe4\xd4\x75\x7a\x4e\xfd\xc6\xf7\x34\xe8\x79\x4c\xff\xbf\xf7\x25\x4f\x63\x70\x8b\xf5\xb7\xc9\x73\xd7\x19\xd5\x7a\xf0\xd9\xa5\xd3\xbb\x87\xc3\x5e\xad\xde\xa6\x01\x51\xcd\xbb\xc1\xb6\xef\x59\xf7\x2a\x9a\x06\x40\xb8\xa1\x34\x7a\xb1\x45\xef\xc6\x3c\x67\xf1\xbf\xd5\x49\x8f\x8a\x42\x28\xae\x0b\xfc\x0c\x00\x00\xff\xff\xad\x63\x42\x08\x39\x03\x00\x00")

func config_go() ([]byte, error) {
	return bindata_read(
		_config_go,
		"config.go",
	)
}

var _config_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\xd1\xca\x83\x30\x0c\x85\xef\x7d\x8a\x90\xeb\x1f\xe9\x3f\x37\x87\xbe\x4d\xb4\x01\xc7\xd0\x94\xa4\xdd\x06\xc3\x3d\xfb\xa8\xca\x7a\x57\xbe\x73\xce\xd7\xbc\x2b\x00\xa4\x14\x27\xec\x21\xbf\x01\x90\x5f\xe1\xa6\x8c\x3d\xb4\xce\x39\xf7\xb7\x43\xe3\x51\x39\x62\x0f\xb8\x8c\x69\x92\x99\xe5\xfe\xc1\x0a\x60\xcd\x39\xfa\xa1\xcc\x27\xb1\xad\xf7\x7f\x72\xf5\xb5\xab\xbb\xfa\xd2\xe2\x21\x09\xa2\x39\x6a\x1a\xd7\x1e\x24\x19\xeb\x42\x73\xfe\x0d\x55\x24\xfe\x9a\x64\xf6\x14\xf5\xbb\xa8\x39\x17\x87\xa7\x48\x03\xd9\xb6\x88\x4c\x73\x0a\xe5\x0c\x5e\x1e\x19\x07\x15\x8f\xd5\xfa\x0d\x00\x00\xff\xff\x98\x7c\xe5\x3d\xdb\x00\x00\x00")

func config_json() ([]byte, error) {
	return bindata_read(
		_config_json,
		"config.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"config-dev.json": config_dev_json,
	"config-test.json": config_test_json,
	"config.go": config_go,
	"config.json": config_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"config-dev.json": &_bintree_t{config_dev_json, map[string]*_bintree_t{
	}},
	"config-test.json": &_bintree_t{config_test_json, map[string]*_bintree_t{
	}},
	"config.go": &_bintree_t{config_go, map[string]*_bintree_t{
	}},
	"config.json": &_bintree_t{config_json, map[string]*_bintree_t{
	}},
}}
