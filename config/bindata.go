package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _config_dev_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x51\xca\x83\x40\x0c\x84\xdf\x3d\x45\xc8\xf3\x8f\xc4\xdf\xd6\x82\xb7\x89\x1a\xb0\x14\xcd\x92\xec\xd2\x42\xb1\x67\x2f\xbb\xda\xf6\x2d\xcc\x37\x33\x99\x67\x05\x80\x9c\xe2\x8c\x3d\xe4\x1b\x00\xe5\x11\xae\x26\xd8\x43\x47\x44\xf4\xb7\x8b\x2e\xa3\x49\xc4\x1e\x70\x1d\xd3\xac\x8b\xe8\xed\x85\x15\xc0\x96\x39\x4e\xc3\x2f\x3e\xab\x17\x5f\xf3\x7f\xa9\xa9\xa6\xba\xc1\xa3\x22\xa8\x65\xd0\xb6\xd4\x1d\x4a\x72\xb1\x95\x97\xfc\x0b\x4d\x35\x7e\x9d\xec\x7e\x57\x9b\xf6\x9a\xf6\x74\xee\x3e\x64\xe2\xc8\x03\x7b\x49\x44\xe1\x25\x85\x32\xa2\xda\xde\x01\x00\x00\xff\xff\x1a\x8f\x12\x8f\xc8\x00\x00\x00")

func config_dev_json() ([]byte, error) {
	return bindata_read(
		_config_dev_json,
		"config-dev.json",
	)
}

var _config_test_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x5d\xaa\x83\x40\x0c\x85\xdf\x5d\x45\xc8\xf3\x45\xe2\xb5\xb5\xe0\x6e\xa2\x06\x2c\xa2\x91\x49\x86\x16\x8a\x5d\x7b\x19\xc7\xd6\xb7\x70\xbe\xf3\x93\x57\x01\x80\x1c\x7d\xc4\x16\xd2\x0d\x80\xf2\x5c\xef\x41\xb0\x85\x86\x88\xe8\x2f\x8b\x26\x7d\x10\xc7\x16\x70\xe9\xe3\xa8\xb3\xe8\xf4\xc6\x02\x60\x4b\x1c\x87\xee\x8c\x8f\x6a\xbb\xaf\xfa\xbf\x95\x54\x52\x59\xe1\x51\xb1\x6a\x48\xa0\xae\xa9\x39\x94\x68\x12\x16\x9e\xd3\x16\x06\x55\xff\x39\xd9\xec\xa1\x61\xc8\x35\xf5\xe5\xda\x7c\xc9\xc0\xce\x1d\xdb\x9e\x70\xe1\x39\xae\xe7\x13\x2e\x79\x58\x27\x2c\xb6\x4f\x00\x00\x00\xff\xff\x09\x38\xd0\x37\xd8\x00\x00\x00")

func config_test_json() ([]byte, error) {
	return bindata_read(
		_config_test_json,
		"config-test.json",
	)
}

var _config_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x3d\x6f\x23\x37\x10\xad\xc9\x5f\x31\x26\x10\x60\xd7\x92\x77\x81\x94\x0e\x54\x59\xb1\x9b\xf8\x03\x36\x52\x05\x81\xc0\xec\x92\x2b\x26\x2b\x72\x41\x72\xa5\xc2\x56\xe3\x22\x88\xd3\x24\x8d\xab\x18\x41\xaa\x20\x55\xa2\x94\x29\x72\xff\x46\xba\xbf\x71\x18\x92\xd6\xf9\xec\xbb\x33\x5c\x1c\x20\x48\xcb\xe1\xf0\xbd\x37\x33\x8f\xab\x8e\x57\x3f\xf0\x46\x40\x65\xb4\x54\x0d\xa5\x6a\xd6\x19\xeb\x21\xa3\x84\x09\x6b\x8d\x75\x8c\x12\x26\x5b\xde\xe0\x6f\xa3\xfc\xb4\xff\xae\xa8\xcc\xac\x9c\xa9\xca\x9a\xb2\x31\x7b\xf1\x61\xfe\x79\x19\x11\x30\x4d\x99\x52\x99\xde\xab\x16\x17\xad\x09\x31\x13\x80\x9c\xb7\x4a\x37\x8e\xd1\x9c\xd2\x39\xb7\x70\x20\x9b\xc4\x5c\x1c\x44\x01\x29\x7a\xcc\x3b\x98\xf1\xee\x9b\x78\xe0\x5b\xa5\xbd\xb0\x92\x57\xe2\x72\x49\x29\x95\xbd\xae\x40\x2a\x5d\x9f\x1b\xe3\xcf\xb8\x9f\x66\xd5\xa2\x86\x98\x9a\x43\x16\x1f\x86\x10\xf4\xe7\x70\x49\x89\xeb\x5a\xe5\x1d\xec\x8f\x52\x92\x2b\x2e\x30\x82\xc7\x86\x29\x94\x19\x57\x20\xd4\x85\xe8\xb8\xe5\xde\xd8\x3c\xa7\xc4\x1a\xe3\xf1\x14\x63\x94\x48\x63\x61\x32\x84\x00\x85\x31\xcb\x75\x23\xe2\xd2\x5d\x52\x42\x94\x4c\x7b\x3b\x98\x8f\xac\x24\x9e\x1f\x8c\x80\x95\x0c\x06\x71\x1b\xc3\x52\xb5\xc2\x05\x7d\x08\x14\x5b\x55\x9c\x0b\x5e\x8f\x95\xcd\xf0\x4c\x8e\x59\x4a\x86\x8c\x9d\x11\x68\xd5\x46\x3c\x62\x85\xef\xad\x06\xc6\x52\x75\xae\x38\x11\x8b\x8c\x05\x9e\x8e\xfb\x29\x68\xe3\x41\x9a\x5e\xd7\x2c\x60\x2c\x69\xe0\x8b\xd2\x91\xf6\xad\xf2\x20\x22\xc1\x96\x25\xac\x57\x3f\xae\x57\xff\x86\x95\x92\x61\xb3\x38\xe1\x33\x91\xe5\x30\x1a\x01\x2b\x1a\xe5\x19\x5c\x5d\x3d\xd9\x68\x4c\x31\x33\x75\x2a\x77\xab\x0f\xf5\x0c\x51\x76\x88\x2e\x69\xfa\x5a\x52\xfc\xbc\xa8\x86\xed\xb8\x95\x56\x3e\x0b\xc3\x44\xcf\xc0\xe8\xde\x36\x63\x21\x79\xdf\xfa\xe4\x1e\x82\xf6\x41\xa4\xb1\xb2\x69\xb0\x31\x86\x9d\x0c\x6c\x94\x86\x6a\xff\xbc\xde\xfc\x7e\xb7\xb9\xbb\x59\xff\xfa\xcf\xfa\xe7\xbf\xd6\xbf\x5c\x6f\x6e\x57\x94\x04\x8b\xa0\xd9\x8b\x8b\x68\x0a\x56\xc9\x86\x0d\x83\x56\x16\x09\x43\x07\xb0\xb9\x4a\xc2\xae\x7b\x30\xec\x34\xae\xad\xb0\xaf\x0c\xaf\x0f\x55\x2b\xb2\x5d\x97\x7f\xf1\x64\x92\xad\x69\x8a\x43\xee\x79\x2b\xb3\x87\xc0\x50\x71\x1d\xea\x6f\x0d\xaf\xf7\xe1\x33\xc7\x86\xb0\xeb\x72\x9a\x26\x19\x5b\x47\xc3\xa2\x2c\x61\x73\xf3\x6a\xfd\xd3\x6a\xf3\xc7\x7f\xaf\x7f\xfb\x7b\xfd\xff\x2d\x25\xc1\xcf\x13\x2c\xc2\xb8\xe2\x48\xf8\x45\x9d\xe5\x94\xd2\x20\x36\x75\x65\x98\x54\x3e\xbe\x3e\x4f\x35\x6e\x25\x66\xc2\xda\x3c\x92\x62\xec\xcc\x2a\xed\x5b\x9d\x31\x3c\x0e\xb5\xb2\xa0\x50\x66\xc2\xcf\x29\x25\x95\x6c\xb0\xff\x68\xb5\x34\x8a\xc1\x07\x6f\x19\x0c\xee\x3b\xcb\x3e\x92\x45\x29\x71\x0b\xe5\xab\x69\x2a\x4c\xe8\x79\xc6\x8e\x4e\x27\xe7\x5f\x9f\x4c\x8e\x4f\xc7\x5f\xb2\xe0\x8c\x8a\x3b\x01\xac\xb3\xa6\xee\x2b\xcf\xf6\x29\x21\xef\x9f\x48\xd2\xb7\x65\x2e\xbe\x77\x46\x87\x0b\xf3\x6e\x7d\xbd\xd6\x4a\x37\xc0\x3d\x24\x4c\x98\x99\x3a\x0c\x3f\x32\xd5\x62\xfe\x02\x96\xbd\x5a\xcc\x9f\x67\xaa\xc5\xfc\x11\x8b\x17\xee\x25\xc5\xec\x61\xfe\xf3\x3c\x98\xb5\x25\xaa\xe3\x25\xfa\x94\xb5\x2c\xa3\x0b\x9f\xf5\x18\x49\x2f\xff\x11\xfe\x0b\x14\xc7\xbc\xcb\xf0\x25\xf0\x26\x00\x00\xff\xff\x2d\x2d\xd3\xe0\xa6\x06\x00\x00")

func config_go() ([]byte, error) {
	return bindata_read(
		_config_go,
		"config.go",
	)
}

var _config_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\xdf\x0a\x82\x50\x0c\xc6\xef\x7d\x8a\xb1\xeb\x90\x95\x65\xe8\xdb\x4c\x1d\x18\xa1\x93\xed\x1c\x0a\xc2\x9e\x3d\xce\x51\xf2\x6e\x7c\x7f\x7e\xfb\x3e\x05\x00\x72\x0c\x23\xb6\x90\x6e\x00\x94\xf7\xf2\x30\xc1\x16\x6a\x22\xa2\xd3\x26\xba\xf4\x26\x01\x5b\xc0\xb9\x8f\xa3\x4e\xa2\xcf\x2f\x16\x00\x6b\xf2\x71\xe8\x8e\xfa\xa8\x9e\x73\xe7\x0b\x95\xf7\xa6\x6c\xca\x5b\x8d\x3b\x64\x51\x4b\x56\x55\x51\xbd\x2b\xd1\xc5\x66\x9e\xd2\x37\x34\xd5\xf0\x4f\xb2\xfb\x4b\x6d\xd8\x40\xd5\xf5\x60\x0c\x1c\xb8\x63\xcf\x8d\x20\x3c\xc5\x25\xcf\x28\xd6\x5f\x00\x00\x00\xff\xff\xc3\x84\xc7\xaf\xca\x00\x00\x00")

func config_json() ([]byte, error) {
	return bindata_read(
		_config_json,
		"config.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"config-dev.json": config_dev_json,
	"config-test.json": config_test_json,
	"config.go": config_go,
	"config.json": config_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"config-dev.json": &_bintree_t{config_dev_json, map[string]*_bintree_t{
	}},
	"config-test.json": &_bintree_t{config_test_json, map[string]*_bintree_t{
	}},
	"config.go": &_bintree_t{config_go, map[string]*_bintree_t{
	}},
	"config.json": &_bintree_t{config_json, map[string]*_bintree_t{
	}},
}}
