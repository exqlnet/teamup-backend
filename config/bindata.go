// Code generated by go-bindata.
// sources:
// Makefile
// README.md
// bindata.go
// config-dev.json
// config-test.json
// config.go
// config.json
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2a\xcd\xcc\x49\xb1\xe2\xe2\x4c\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x57\x48\xce\xcf\x4b\xcb\x4c\x57\xd0\x03\x04\x00\x00\xff\xff\xeb\x83\x5a\x4f\x20\x00\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 32, mode: os.FileMode(420), modTime: time.Unix(1588003275, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x41\x4a\xc3\x40\x14\xc6\xf1\xfd\x9c\xe2\x5d\x20\x93\x2b\x25\x8d\xf5\x25\x58\x3b\xa5\x9d\xec\xdb\x45\x4c\x52\x52\x14\x94\x6c\x22\x58\x29\xba\x92\xda\x85\x94\x32\x51\x7a\x99\x99\x97\x99\x95\x57\x10\x0d\xa2\x8b\xae\x3f\xbe\x1f\x7f\xd3\xac\xf5\x41\xd1\x72\xe9\xb2\x55\xf7\xb1\xa5\x3a\xd7\xed\x9e\xca\x5b\x53\x65\xf6\xd8\x68\x75\x85\x42\xab\xca\x1e\x1b\x53\xec\xfb\xd1\xe5\xd5\xe7\x7b\x45\xe5\x5c\xb7\x4f\xf4\x7a\x4d\x2f\x8f\xd4\xbc\x51\xbd\xeb\x01\x77\x3f\xb7\xcf\x0b\x97\xaf\xa8\xde\x75\x77\x0f\x54\xdc\x30\x66\xb2\xc2\x6c\x4b\xbb\xc9\x50\x78\x83\x64\x7c\x16\xca\x90\xb1\x20\x08\x66\xf1\x70\x34\x82\x59\x34\x4d\x26\x92\xa1\x00\x1c\x4a\xf0\x52\xc0\x44\xc6\xe9\x80\x47\xe2\xd2\x0f\xbd\x74\x2a\x63\xff\xef\xe7\x73\xce\xe1\xfb\xcb\x58\x1f\xf9\x3f\x5b\x1f\x14\x0a\xdd\x6e\xba\xf5\xe2\x04\xff\x4b\x80\x37\xb9\x40\x88\xc4\xf8\x3c\x41\xe0\x3f\xd6\x57\x00\x00\x00\xff\xff\xde\xcc\x69\x49\x05\x01\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 261, mode: os.FileMode(420), modTime: time.Unix(1588003405, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1589433968, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configDevJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\xdd\x0a\x83\x30\x0c\x85\xef\x7d\x8a\x90\x6b\x91\x3a\x37\x07\xbe\x8c\x44\x1b\xa8\x0c\x6d\xe9\x8f\x0e\x86\x7b\xf6\x51\xed\xec\x5d\x7b\xbe\x2f\xa7\xe9\xa7\x00\x40\x0a\x5e\x61\x07\xf1\x0c\x80\xfc\x36\x93\x65\xec\xa0\x15\x42\x88\xf2\x0c\x1d\x8f\x96\x3d\x76\x80\xcb\x18\x94\x9e\x59\xbf\xbe\x58\x00\xec\x91\xa3\x1c\xf2\xb8\xd2\xee\xf0\xea\xdb\xb3\x12\x95\xa8\x6a\x4c\x15\x46\xdb\x08\x9a\x46\xb4\x29\x09\x8e\xed\x42\x73\x7c\x0b\xad\xd6\xfe\x32\xc9\xb9\x4d\x5b\x79\xd6\x34\xf7\x47\xfb\x27\x92\x3c\x0d\xe4\x8e\x09\xcf\x34\x07\x93\x97\xd8\x78\x54\xe4\xf3\x22\x64\x4c\x3f\xc9\xd3\x74\xbe\x4f\xd7\x32\xc3\xfc\xa7\x4b\x48\xd1\xd5\xc9\xcb\x1a\xb9\xe4\x15\x8b\xfd\x17\x00\x00\xff\xff\x7f\x79\xfa\x26\x2c\x01\x00\x00")

func configDevJsonBytes() ([]byte, error) {
	return bindataRead(
		_configDevJson,
		"config-dev.json",
	)
}

func configDevJson() (*asset, error) {
	bytes, err := configDevJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config-dev.json", size: 300, mode: os.FileMode(420), modTime: time.Unix(1589432423, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configTestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\xd1\x6e\x85\x20\x0c\x86\xef\x7d\x8a\xa6\xd7\x27\x86\xcd\xcd\xe5\xf8\x32\xa6\x4a\x13\xcc\xa2\x10\x5a\xe6\x92\xc5\x3d\xfb\x82\x32\xb9\x83\xff\xff\xfa\x51\x7e\x1a\x00\xa4\xa4\x0e\x07\xc8\x67\x00\xe4\xef\xb0\x44\xc6\x01\x7a\x63\x8c\x79\x5c\xa1\xf0\x1c\x59\x71\x00\xdc\xe6\xe4\xfc\xca\xfe\xf3\x17\x1b\x80\x23\xf7\x68\xa7\x3a\xee\xbc\x9c\xdc\xcb\xab\x69\x3f\x9e\xed\xb3\x7d\xef\xb1\x48\x82\x8f\xb9\xea\x3a\xd3\x97\x24\x09\xc7\x8d\xd6\xfc\x1a\x46\xef\xf5\x26\x49\x64\xf7\xd1\x5e\xa2\xee\xad\x3a\x2c\x29\x4d\x24\xe7\x84\x32\xad\x29\x8c\xca\xa2\x75\x97\x9d\x67\x47\x5a\xf7\xa1\x10\xc6\xc5\x5e\xb8\xe8\x58\xae\x8f\x5a\xd6\xaf\xdd\x40\x89\x6e\x27\x6f\x5f\xff\x3d\x36\xc7\x5f\x00\x00\x00\xff\xff\xd2\x21\x74\x9e\x34\x01\x00\x00")

func configTestJsonBytes() ([]byte, error) {
	return bindataRead(
		_configTestJson,
		"config-test.json",
	)
}

func configTestJson() (*asset, error) {
	bytes, err := configTestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config-test.json", size: 308, mode: os.FileMode(420), modTime: time.Unix(1589432423, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xc1\x8b\xd4\x30\x14\xc6\xcf\x79\x7f\xc5\x33\xa7\x14\x76\x5a\xf0\x28\xcc\x41\x66\x75\x41\x74\x46\x76\x11\x0f\x22\x43\x36\x7d\xcd\x44\xdb\xbc\x21\x49\xbb\x2c\x32\xff\xbb\x24\xa9\x1e\xbc\x8c\x82\x87\xd2\x36\x7c\xfd\xfd\x3e\xf8\x7a\xd6\xe6\xbb\xb6\x84\x86\xfd\xe0\x2c\x80\x9b\xce\x1c\x12\x2a\x10\xd2\xba\x74\x9a\x1f\x5b\xc3\x53\x37\x39\x13\xb8\xb3\xbc\xa9\x0f\xcb\xcb\xae\xe6\xe5\xdf\xc5\xba\xc8\x73\x30\xf4\x6f\xe9\x6e\xa2\x89\xc3\x73\xfe\x68\xe4\x62\xe2\x28\xa1\x01\x58\x74\xc0\xdd\x60\xd7\xca\xed\x6e\x6d\x3e\xcc\xde\xa0\xf3\x2e\xa9\x06\x7f\x80\xd8\x0d\xf6\x06\x8f\x88\xdb\x5f\xb9\x3d\x3d\xd5\xa8\x6a\x40\x64\x06\x85\x72\x71\x80\xfa\x1e\x0d\x56\x73\xfb\x50\x6e\xf5\xd4\x0c\xf6\x56\x27\x8d\x5f\xbe\x3e\x3e\x27\x02\x10\xf1\xc9\x25\x73\x42\x8e\xed\x1d\x25\xf2\x8b\x92\x77\x87\xe3\xfd\xa7\xfd\xf1\xc3\xe1\xf6\x8d\x2c\x6e\xa3\x23\xa1\x3c\x07\xee\x67\x93\xe4\x2b\x10\x62\xa5\xdc\x14\xe9\x16\x5f\xc7\x48\x49\xc9\xb5\xd9\xb7\xc8\x5e\x36\x20\xc4\xc8\xb6\xfd\x18\x9c\x4f\xa3\x57\xf2\x7e\xf6\xde\x79\x8b\x3a\xe1\x4a\xc2\x89\x7b\xca\xc1\xca\xef\x69\xb9\xca\xde\xf4\xb4\x5c\xe7\xf7\xb4\xfc\xc1\x4e\x14\xaf\x17\xdf\xe4\xd4\x75\x7a\x4e\xfd\xc6\xf7\x34\xe8\x79\x4c\xff\xbf\xf7\x25\x4f\x63\x70\x8b\xf5\xb7\xc9\x73\xd7\x19\xd5\x7a\xf0\xd9\xa5\xd3\xbb\x87\xc3\x5e\xad\xde\xa6\x01\x51\xcd\xbb\xc1\xb6\xef\x59\xf7\x2a\x9a\x06\x40\xb8\xa1\x34\x7a\xb1\x45\xef\xc6\x3c\x67\xf1\xbf\xd5\x49\x8f\x8a\x42\x28\xae\x0b\xfc\x0c\x00\x00\xff\xff\xad\x63\x42\x08\x39\x03\x00\x00")

func configGoBytes() ([]byte, error) {
	return bindataRead(
		_configGo,
		"config.go",
	)
}

func configGo() (*asset, error) {
	bytes, err := configGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.go", size: 825, mode: os.FileMode(420), modTime: time.Unix(1588000267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\x5d\x6e\xc3\x20\x10\x84\xdf\x73\x0a\xb4\xcf\x95\xb5\x36\x04\xff\x5c\xa6\x5a\xb3\x5b\x39\xaa\x6c\x10\xe0\x3a\x52\x95\x9e\xbd\xc2\x49\xcb\x1b\xda\x99\xf9\x66\xf8\xbe\x28\x05\xb4\xe7\x05\x26\x55\xde\x4a\x81\xdc\xc3\x2d\x0a\x4c\xca\x22\x22\xbe\x3d\x8f\x49\x5c\x94\x0c\x93\x82\xcd\xed\x8b\x5f\xc5\x7f\xfe\xc0\x45\xa9\x47\xd1\x81\xe7\x1a\x5f\x7c\x3a\x7d\x6d\x87\x4d\x3f\x36\x63\x73\xb5\xf0\x82\x04\x1f\x8b\xa4\x35\xda\xd7\x65\x4f\x12\x37\x5a\x4b\x1b\x44\xef\xf3\xbf\x93\x52\x3a\x7c\xe4\x27\x48\x9b\xca\x60\xca\x34\x53\x3a\x13\x59\x68\xdd\x43\x9d\x71\x88\x5b\x28\xd7\x29\x14\xc2\xfb\xed\x64\x1c\xf7\x4e\x58\x68\x44\x27\x57\xf7\x21\x9d\xd3\x7f\xbc\xe2\xa9\x9f\x9b\x87\x91\xd0\x5a\xe2\xd6\x68\x8d\xc4\x7d\x6b\x4c\x3f\x70\x6f\x04\x0d\x23\x0f\xb5\x4b\xb6\xaf\x12\x08\xd1\x33\x5c\x1e\xbf\x01\x00\x00\xff\xff\xf8\x0c\xa6\x7c\x47\x01\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 327, mode: os.FileMode(420), modTime: time.Unix(1589432423, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Makefile": makefile,
	"README.md": readmeMd,
	"bindata.go": bindataGo,
	"config-dev.json": configDevJson,
	"config-test.json": configTestJson,
	"config.go": configGo,
	"config.json": configJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Makefile": &bintree{makefile, map[string]*bintree{}},
	"README.md": &bintree{readmeMd, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"config-dev.json": &bintree{configDevJson, map[string]*bintree{}},
	"config-test.json": &bintree{configTestJson, map[string]*bintree{}},
	"config.go": &bintree{configGo, map[string]*bintree{}},
	"config.json": &bintree{configJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

